/**
 * Player VM API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { BulkPowerOperation } from '../model/bulkPowerOperation';
import { BulkPowerOperationResponse } from '../model/bulkPowerOperationResponse';
import { Permissions } from '../model/permissions';
import { ProblemDetails } from '../model/problemDetails';
import { SimpleTeam } from '../model/simpleTeam';
import { Vm } from '../model/vm';
import { VmCreateForm } from '../model/vmCreateForm';
import { VmMap } from '../model/vmMap';
import { VmMapCreateForm } from '../model/vmMapCreateForm';
import { VmMapUpdateForm } from '../model/vmMapUpdateForm';
import { VmUpdateForm } from '../model/vmUpdateForm';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class VmsService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Adds a Virtual Machine to a Team
     * Creates a new Virtual Machine with the attributes specified  &lt;para /&gt;  Accessible to a User with management permissions on a team the Virtual Machine will be added to
     * @param vmId The id of the Virtual Machine
     * @param teamId The id of the Team
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addVmToTeam(vmId: string, teamId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addVmToTeam(vmId: string, teamId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addVmToTeam(vmId: string, teamId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addVmToTeam(vmId: string, teamId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (vmId === null || vmId === undefined) {
            throw new Error('Required parameter vmId was null or undefined when calling addVmToTeam.');
        }
        if (teamId === null || teamId === undefined) {
            throw new Error('Required parameter teamId was null or undefined when calling addVmToTeam.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.configuration.basePath}/api/teams/${encodeURIComponent(String(teamId))}/vms/${encodeURIComponent(String(vmId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Power off multiple Virtual Machines
     * 
     * @param BulkPowerOperation 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public bulkPowerOff(BulkPowerOperation?: BulkPowerOperation, observe?: 'body', reportProgress?: boolean): Observable<BulkPowerOperationResponse>;
    public bulkPowerOff(BulkPowerOperation?: BulkPowerOperation, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BulkPowerOperationResponse>>;
    public bulkPowerOff(BulkPowerOperation?: BulkPowerOperation, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BulkPowerOperationResponse>>;
    public bulkPowerOff(BulkPowerOperation?: BulkPowerOperation, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<BulkPowerOperationResponse>(`${this.configuration.basePath}/api/vms/actions/power-off`,
            BulkPowerOperation,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Power on multiple Virtual Machines
     * 
     * @param BulkPowerOperation 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public bulkPowerOn(BulkPowerOperation?: BulkPowerOperation, observe?: 'body', reportProgress?: boolean): Observable<BulkPowerOperationResponse>;
    public bulkPowerOn(BulkPowerOperation?: BulkPowerOperation, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BulkPowerOperationResponse>>;
    public bulkPowerOn(BulkPowerOperation?: BulkPowerOperation, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BulkPowerOperationResponse>>;
    public bulkPowerOn(BulkPowerOperation?: BulkPowerOperation, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<BulkPowerOperationResponse>(`${this.configuration.basePath}/api/vms/actions/power-on`,
            BulkPowerOperation,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Shutdown multiple Virtual Machines
     * 
     * @param BulkPowerOperation 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public bulkShutdown(BulkPowerOperation?: BulkPowerOperation, observe?: 'body', reportProgress?: boolean): Observable<BulkPowerOperationResponse>;
    public bulkShutdown(BulkPowerOperation?: BulkPowerOperation, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BulkPowerOperationResponse>>;
    public bulkShutdown(BulkPowerOperation?: BulkPowerOperation, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BulkPowerOperationResponse>>;
    public bulkShutdown(BulkPowerOperation?: BulkPowerOperation, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<BulkPowerOperationResponse>(`${this.configuration.basePath}/api/vms/actions/shutdown`,
            BulkPowerOperation,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add a new map to a view
     * 
     * @param viewId The guid of the view to add the map to
     * @param VmMapCreateForm The data of the map to create
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createMap(viewId: string, VmMapCreateForm?: VmMapCreateForm, observe?: 'body', reportProgress?: boolean): Observable<VmMap>;
    public createMap(viewId: string, VmMapCreateForm?: VmMapCreateForm, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VmMap>>;
    public createMap(viewId: string, VmMapCreateForm?: VmMapCreateForm, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VmMap>>;
    public createMap(viewId: string, VmMapCreateForm?: VmMapCreateForm, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (viewId === null || viewId === undefined) {
            throw new Error('Required parameter viewId was null or undefined when calling createMap.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<VmMap>(`${this.configuration.basePath}/api/views/${encodeURIComponent(String(viewId))}/map`,
            VmMapCreateForm,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a new Virtual Machine
     * Creates a new Virtual Machine with the attributes specified  &lt;para /&gt;  Accessible to a User with management permissions on a team the Virtual Machine will be added to
     * @param VmCreateForm The data to create the Team with
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createVm(VmCreateForm?: VmCreateForm, observe?: 'body', reportProgress?: boolean): Observable<Vm>;
    public createVm(VmCreateForm?: VmCreateForm, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Vm>>;
    public createVm(VmCreateForm?: VmCreateForm, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Vm>>;
    public createVm(VmCreateForm?: VmCreateForm, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Vm>(`${this.configuration.basePath}/api/vms`,
            VmCreateForm,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a map with the specified id
     * 
     * @param mapId The guid of the map to delete
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteMap(mapId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteMap(mapId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteMap(mapId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteMap(mapId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (mapId === null || mapId === undefined) {
            throw new Error('Required parameter mapId was null or undefined when calling deleteMap.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.configuration.basePath}/api/views/maps/${encodeURIComponent(String(mapId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a Vm
     * Deletes a Vm with the specified id  &lt;para /&gt;  Accessible to a User with management permission on a team the Virtual Machine is in
     * @param id The id of the Vm
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteVm(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteVm(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteVm(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteVm(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteVm.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.configuration.basePath}/api/vms/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve all Vms
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAll(observe?: 'body', reportProgress?: boolean): Observable<Array<Vm>>;
    public getAll(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Vm>>>;
    public getAll(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Vm>>>;
    public getAll(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Vm>>(`${this.configuration.basePath}/api/vms`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all maps in the system
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllMaps(observe?: 'body', reportProgress?: boolean): Observable<Array<VmMap>>;
    public getAllMaps(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<VmMap>>>;
    public getAllMaps(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<VmMap>>>;
    public getAllMaps(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<VmMap>>(`${this.configuration.basePath}/api/views/maps`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a specific map by id
     * 
     * @param mapId The guid of the map to retrieve
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMap(mapId: string, observe?: 'body', reportProgress?: boolean): Observable<VmMap>;
    public getMap(mapId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VmMap>>;
    public getMap(mapId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VmMap>>;
    public getMap(mapId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (mapId === null || mapId === undefined) {
            throw new Error('Required parameter mapId was null or undefined when calling getMap.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<VmMap>(`${this.configuration.basePath}/api/views/maps/${encodeURIComponent(String(mapId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a map for a specific team
     * 
     * @param teamId The guid of the team to consider
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTeamMap(teamId: string, observe?: 'body', reportProgress?: boolean): Observable<VmMap>;
    public getTeamMap(teamId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VmMap>>;
    public getTeamMap(teamId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VmMap>>;
    public getTeamMap(teamId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (teamId === null || teamId === undefined) {
            throw new Error('Required parameter teamId was null or undefined when calling getTeamMap.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<VmMap>(`${this.configuration.basePath}/api/teams/${encodeURIComponent(String(teamId))}/map`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets all of the Vms in the specified Team
     * 
     * @param teamId 
     * @param name An optional search term for the vm&#39;s name
     * @param includePersonal 
     * @param onlyMine 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTeamVms(teamId: string, name?: string, includePersonal?: boolean, onlyMine?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<Vm>>;
    public getTeamVms(teamId: string, name?: string, includePersonal?: boolean, onlyMine?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Vm>>>;
    public getTeamVms(teamId: string, name?: string, includePersonal?: boolean, onlyMine?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Vm>>>;
    public getTeamVms(teamId: string, name?: string, includePersonal?: boolean, onlyMine?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (teamId === null || teamId === undefined) {
            throw new Error('Required parameter teamId was null or undefined when calling getTeamVms.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (includePersonal !== undefined && includePersonal !== null) {
            queryParameters = queryParameters.set('includePersonal', <any>includePersonal);
        }
        if (onlyMine !== undefined && onlyMine !== null) {
            queryParameters = queryParameters.set('onlyMine', <any>onlyMine);
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Vm>>(`${this.configuration.basePath}/api/teams/${encodeURIComponent(String(teamId))}/vms`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all the teams in a view
     * Implemented to avoid calling Player API in VM UI app
     * @param viewId The guid of the view to consider
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTeams(viewId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SimpleTeam>>;
    public getTeams(viewId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SimpleTeam>>>;
    public getTeams(viewId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SimpleTeam>>>;
    public getTeams(viewId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (viewId === null || viewId === undefined) {
            throw new Error('Required parameter viewId was null or undefined when calling getTeams.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<SimpleTeam>>(`${this.configuration.basePath}/api/views/${encodeURIComponent(String(viewId))}/teams`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all maps for a view
     * 
     * @param viewId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getViewMaps(viewId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<VmMap>>;
    public getViewMaps(viewId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<VmMap>>>;
    public getViewMaps(viewId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<VmMap>>>;
    public getViewMaps(viewId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (viewId === null || viewId === undefined) {
            throw new Error('Required parameter viewId was null or undefined when calling getViewMaps.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<VmMap>>(`${this.configuration.basePath}/api/views/maps/viewmaps/${encodeURIComponent(String(viewId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve vm permissions by view
     * 
     * @param id The Id of the View
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getViewPermissions(id: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Permissions>>;
    public getViewPermissions(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Permissions>>>;
    public getViewPermissions(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Permissions>>>;
    public getViewPermissions(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getViewPermissions.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Permissions>>(`${this.configuration.basePath}/api/views/${encodeURIComponent(String(id))}/permissions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets all of the Vms the calling user has access to in the specified View
     * 
     * @param viewId The Id of the View
     * @param name An optional search term for the vm&#39;s name
     * @param includePersonal 
     * @param onlyMine 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getViewVms(viewId: string, name?: string, includePersonal?: boolean, onlyMine?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<Vm>>;
    public getViewVms(viewId: string, name?: string, includePersonal?: boolean, onlyMine?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Vm>>>;
    public getViewVms(viewId: string, name?: string, includePersonal?: boolean, onlyMine?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Vm>>>;
    public getViewVms(viewId: string, name?: string, includePersonal?: boolean, onlyMine?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (viewId === null || viewId === undefined) {
            throw new Error('Required parameter viewId was null or undefined when calling getViewVms.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (includePersonal !== undefined && includePersonal !== null) {
            queryParameters = queryParameters.set('includePersonal', <any>includePersonal);
        }
        if (onlyMine !== undefined && onlyMine !== null) {
            queryParameters = queryParameters.set('onlyMine', <any>onlyMine);
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Vm>>(`${this.configuration.basePath}/api/views/${encodeURIComponent(String(viewId))}/vms`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve a single Vm by Id
     * 
     * @param id The Id of the Vm
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVm(id: string, observe?: 'body', reportProgress?: boolean): Observable<Vm>;
    public getVm(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Vm>>;
    public getVm(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Vm>>;
    public getVm(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getVm.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Vm>(`${this.configuration.basePath}/api/vms/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve permissions of a single Vm by Id
     * 
     * @param id The Id of the Vm
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVmPermissions(id: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Permissions>>;
    public getVmPermissions(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Permissions>>>;
    public getVmPermissions(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Permissions>>>;
    public getVmPermissions(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getVmPermissions.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Permissions>>(`${this.configuration.basePath}/api/vms/${encodeURIComponent(String(id))}/permissions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Removes a Virtual Machine from a Team
     * Removes the specified Virtual Machine from the specified Team  &lt;para /&gt;  Accessible to a User with management permissions on a team the Virtual Machine will be added to
     * @param vmId The id of the Virtual Machine
     * @param teamId The id of the Team
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeVmFromTeam(vmId: string, teamId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeVmFromTeam(vmId: string, teamId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeVmFromTeam(vmId: string, teamId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeVmFromTeam(vmId: string, teamId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (vmId === null || vmId === undefined) {
            throw new Error('Required parameter vmId was null or undefined when calling removeVmFromTeam.');
        }
        if (teamId === null || teamId === undefined) {
            throw new Error('Required parameter teamId was null or undefined when calling removeVmFromTeam.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.configuration.basePath}/api/teams/${encodeURIComponent(String(teamId))}/vms/${encodeURIComponent(String(vmId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a map
     * 
     * @param mapId The guid of the map to update
     * @param VmMapUpdateForm The data of the map to update
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateMap(mapId: string, VmMapUpdateForm?: VmMapUpdateForm, observe?: 'body', reportProgress?: boolean): Observable<VmMap>;
    public updateMap(mapId: string, VmMapUpdateForm?: VmMapUpdateForm, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VmMap>>;
    public updateMap(mapId: string, VmMapUpdateForm?: VmMapUpdateForm, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VmMap>>;
    public updateMap(mapId: string, VmMapUpdateForm?: VmMapUpdateForm, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (mapId === null || mapId === undefined) {
            throw new Error('Required parameter mapId was null or undefined when calling updateMap.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<VmMap>(`${this.configuration.basePath}/api/views/maps/${encodeURIComponent(String(mapId))}`,
            VmMapUpdateForm,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a new Virtual Machine
     * Updates a Virtual Machine with the attributes specified  &lt;para /&gt;  Accessible to a User with management permissions on a team the Virtual Machine is in
     * @param id 
     * @param VmUpdateForm The data to update the Virtual Machine with
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateVm(id: string, VmUpdateForm?: VmUpdateForm, observe?: 'body', reportProgress?: boolean): Observable<Vm>;
    public updateVm(id: string, VmUpdateForm?: VmUpdateForm, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Vm>>;
    public updateVm(id: string, VmUpdateForm?: VmUpdateForm, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Vm>>;
    public updateVm(id: string, VmUpdateForm?: VmUpdateForm, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateVm.');
        }

        let headers = this.defaultHeaders;

        // authentication (oauth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Vm>(`${this.configuration.basePath}/api/vms/${encodeURIComponent(String(id))}`,
            VmUpdateForm,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
